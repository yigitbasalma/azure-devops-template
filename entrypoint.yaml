trigger: none

#pool:
#  name: Default

parameters:
  - name: env_provider
    displayName: Environment Provider
    type: string
    values:
      - project
      - repo
  - name: project
    displayName: Project Name
    type: string
    default: Sample Project A
  - name: environment
    displayName: Environment
    type: string
    values:
      - dev
      - test
      - staging

stages:
  - stage: prepare
    displayName: Prepare to Deployment Operation
    jobs:
      - job: Job
        steps:
          - checkout: self
          - checkout: templates

          - task: PowerShell@2
            displayName: Prevent concurrent task runs
            continueOnError: false
            timeoutInMinutes: 30
            inputs:
              filePath: azure-devops-template/scripts/prevent-concurrent-task.ps1
              arguments: |
                -SystemDBAddress $(SystemDBAddress) `
                -SystemDBDatabase $(SystemDBDatabase) `
                -SystemDBUsername $(SystemDBUsername) `
                -SystemDBPassword $(SystemDBPassword) `
                -Operation check `
                -ProjectName $(ProjectName) `
                -ParentProjectName $(ParentProjectName) `
                -Environment ${{ parameters.environment }}

          - task: PowerShell@2
            displayName: Create server environment if couldn't exists
            condition: eq(variables.AutoCreateEnv, true)
            inputs:
              filePath: azure-devops-template/scripts/create-env-on-ado.ps1
              arguments: |
                -ProjectName $(ProjectName) `
                -ParentProjectName $(ParentProjectName) `
                -PersonalAccessTokenB64 $(PersonalAccessTokenB64) `
                -Environment ${{ parameters.environment }}

          - task: PowerShell@2
            condition: eq(variables.AutoRegisterServers, true)
            displayName: Gather servers from Load Balancer and add them into environment
            inputs:
              filePath: azure-devops-template/scripts/add-servers-from-lb.ps1
              arguments: |
                -LBAddress $(NetScalerURL) `
                -LBUsername $(NetScalerUsername) `
                -LBPassword $(NetScalerPassword) `
                -VirtualServerName $(VirtualServerName) `
                -VMUsername $(VMUsername) `
                -VMPassword $(VMPassword) `
                -PersonalAccessToken $(PersonalAccessToken) `
                -DeploymentGroup $(DeploymentGroup) `
                -ParentProjectName $(ParentProjectName) `
                -Environment ${{ parameters.environment }}

          - task: PowerShell@2
            name: GetServers
            displayName: Collect server informations from ADS
            inputs:
              filePath: azure-devops-template/scripts/collect-server-informations.ps1
              arguments: |
                -ProjectName $(ProjectName) `
                -ParentProjectName $(ParentProjectName) `
                -PersonalAccessTokenB64 $(PersonalAccessTokenB64) `
                -Environment ${{ parameters.environment }}

          - template: templates/artifact-controller/main.yaml
            parameters:
              environment: ${{ parameters.environment }}
              packages: $(Packages)
  - stage: deploy
    displayName: Start to Deployment Operation
    dependsOn: prepare
    variables:
      VServers: $[stageDependencies.prepare.Job.outputs['GetServers.VServers']]
      DeploymentParts: part1,part2
    jobs:
      - ${{ each part in split(variables.DeploymentParts, ',') }}:
        - job: ${{ part }}
          displayName: Deployment for ${{ part }}
          ${{ if eq(part, 'part2') }}:
            dependsOn: part1
          steps:
            - checkout: self
            - checkout: templates

            - template: templates/load-balancer-controller/main.yaml
              parameters:
                operation: disable
                deployment_part: ${{ part }}
                vservers: $(VServers)

            - task: PowerShell@2
              displayName: Convert package string into Json object
              inputs:
                targetType: 'inline'
                script: |
                  $packagesObject = $(Packages) | ConvertFrom-Json
                  Write-Host "##vso[task.setvariable variable=PackagesJSON;isOutput=true]$packagesObject"

            - template: templates/deployment-controller/main.yaml
              parameters:
                environment: ${{ parameters.environment }}
                deployment_part: ${{ part }}
                packages_json: $(PackagesJSON)
  - stage: complete
    displayName: Complete to Deployment Operation
    condition: always()
    jobs:
      - job: Job
        steps:
          - checkout: self
          - checkout: templates

          - task: PowerShell@2
            displayName: Complete release operation
            timeoutInMinutes: 30
            inputs:
              filePath: azure-devops-template/scripts/prevent-concurrent-task.ps1
              arguments: |
                -SystemDBAddress $(SystemDBAddress) `
                -SystemDBDatabase $(SystemDBDatabase) `
                -SystemDBUsername $(SystemDBUsername) `
                -SystemDBPassword $(SystemDBPassword) `
                -Operation done `
                -ProjectName $(ProjectName) `
                -ParentProjectName $(ParentProjectName) `
                -Environment ${{ parameters.environment }}